
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "intro/scipy/auto_examples/plot_interpolation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_intro_scipy_auto_examples_plot_interpolation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_intro_scipy_auto_examples_plot_interpolation.py:


============================
A demo of 1D interpolation
============================

.. GENERATED FROM PYTHON SOURCE LINES 7-55

.. code-block:: Python


    # Generate data
    import numpy as np

    rng = np.random.default_rng(27446968)
    measured_time = np.linspace(0, 2 * np.pi, 20)
    function = np.sin(measured_time)
    noise = rng.normal(loc=0, scale=0.1, size=20)
    measurements = function + noise

    # Smooth the curve and interpolate at new times
    import scipy as sp

    smoothing_spline = sp.interpolate.make_smoothing_spline(measured_time, measurements)
    interpolation_time = np.linspace(0, 2 * np.pi, 200)
    smooth_results = smoothing_spline(interpolation_time)

    # Plot the data, the interpolant, and the original function
    import matplotlib.pyplot as plt

    plt.figure(figsize=(6, 4))
    plt.plot(measured_time, measurements, ".", ms=6, label="measurements")
    plt.plot(interpolation_time, smooth_results, label="smoothing spline")
    plt.plot(interpolation_time, np.sin(interpolation_time), "--", label="underlying curve")
    plt.legend()
    plt.show()

    # Fit the data exactly
    interp_spline = sp.interpolate.make_interp_spline(measured_time, function)
    interp_results = interp_spline(interpolation_time)

    # Plot the data, the interpolant, and the original function
    plt.figure(figsize=(6, 4))
    plt.plot(measured_time, function, ".", ms=6, label="measurements")
    plt.plot(interpolation_time, interp_results, label="interpolating spline")
    plt.plot(interpolation_time, np.sin(interpolation_time), "--", label="underlying curve")
    plt.legend()
    plt.show()

    # Plot interpolant, its derivative, and its antiderivative
    plt.figure(figsize=(6, 4))
    t = interpolation_time
    plt.plot(t, interp_spline(t), label="spline")
    plt.plot(t, interp_spline.derivative()(t), label="derivative")
    plt.plot(t, interp_spline.antiderivative()(t) - 1, label="antiderivative")

    plt.legend()
    plt.show()


.. _sphx_glr_download_intro_scipy_auto_examples_plot_interpolation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_interpolation.ipynb <plot_interpolation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_interpolation.py <plot_interpolation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_interpolation.zip <plot_interpolation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
